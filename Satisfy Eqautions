/*
Satisfy the equation
Given an array A[ ] of N of  integers, find the index of values that satisfy A + B = C + D where A,B,C & D are integers values in the array.
Note: As there may be multiple pairs satisfying the equation return lexicographically smallest order of  A, B, C and D and return all as -1 if there are no pairs satisfying the equation.

Example 1:

Input:
N = 7
A[] = {3, 4, 7, 1, 2, 9, 8}
Output:
0 2 3 5
Explanation:
A[0] + A[2] = 3+7 = 10
A[3] + A[5] = 1+9 = 10
Example 2:

Input:
N = 4
A[] = {424, 12, 31, 7}
Output:
-1 -1 -1 -1
Explanation:
There are no pairs satisfying the equation.

*/

vector<int> satisfyEqn(int A[], int N) {
        // code here
        unordered_map<int,pair<int,int>>mp;
        vector<int>ans;
        for(int i=0;i<N-1;i++)
        {
            for(int j=i+1;j<N;j++)
            {
                int sum=A[i]+A[j];
                if(mp.find(sum)!=mp.end())
                {
                    if(mp[sum].first!=i && mp[sum].second!=i && mp[sum].first!=j && mp[sum].second!=j)
                    {
                        vector<int>v={mp[sum].first,mp[sum].second,i,j};
                        if(ans.size()==0 || ans>v)
                        ans=v;
                    }
                }
                else
                mp[sum]={i,j};
            }
        }
        if(ans.empty()){
        vector<int>v={-1,-1,-1,-1};
        return v;
        }
        return ans;
}
